
name: Build controller image

on:
  workflow_call:
    inputs:
      push_image:
        description: "Push image"
        required: false
        type: boolean
        default: false
      push_image_tag:
        description: "Push image tag"
        default: "latest"
        required: false
        type: string
env:
  GO_VERSION: "1.22"
jobs:
  detect-module:
    uses: ./.github/workflows/detect-controller-module.yml
  run-linter:
    needs: detect-module
    uses: ./.github/workflows/golangci-lint.yml
    with:
      modules: ${{ needs.detect-module.outputs.modules }}
      workdir: "controllers"
  image-build:
    needs: detect-module
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: ${{ inputs.push_image == true && 'write' || 'read' }}
    strategy:     
       matrix:
        module: ${{ needs.detect-module.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build ${{ matrix.module.name }} amd64
        working-directory: controllers/${{ matrix.module.path }}
        env:
          MODULE_NAME: ${{ matrix.module.name }}
          MODULE_PATH: ${{ matrix.module.path }}
        run: |
          GOARCH=amd64 TARGETARCH=amd64 make build
          mv bin/manager "bin/controller-${MODULE_NAME}-amd64"
          chmod +x "bin/controller-${MODULE_NAME}-amd64"

      - name: Build ${{ matrix.module.name }} arm64
        working-directory: controllers/${{ matrix.module.path }}
        env:
          MODULE_NAME: ${{ matrix.module.name }}
          MODULE_PATH: ${{ matrix.module.path }}
        run: |
          GOARCH=arm64 TARGETARCH=arm64 make build
          mv bin/manager "bin/controller-${MODULE_NAME}-arm64"
          chmod +x "bin/controller-${MODULE_NAME}-arm64"

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1
      - name: Check if tag
        id: check_tag
        env:
          REF: ${{ github.ref }}
        run: |
          if [[ "$REF" == refs/tags/* ]]; then
            echo "isTag=true" >> "$GITHUB_OUTPUT"
          else
            echo "isTag=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Prepare
        id: prepare
        env:
          PUSH_IMAGE: ${{ inputs.push_image }}
          IS_TAG: ${{ steps.check_tag.outputs.isTag }}
          REPO_OWNER: ${{ github.repository_owner }}
          MODULE_NAME: ${{ matrix.module.name }}
          PUSH_IMAGE_TAG: ${{ inputs.push_image_tag }}
        run: |
          bash scripts/resolve-tag-image.sh "$PUSH_IMAGE" "$IS_TAG" "$PUSH_IMAGE_TAG"
          echo "docker_repo=ghcr.io/${REPO_OWNER}/sealos-${MODULE_NAME}-controller" >> $GITHUB_OUTPUT

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/sealos-${{ matrix.module.name }}-controller
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ steps.prepare.outputs.tag_name }},enable=true

      - name: build (and publish) ${{ matrix.module.name }} main image
        uses: docker/build-push-action@v6
        with:
          context: ./controllers/${{ matrix.module.path }}
          file: ./controllers/${{ matrix.module.path }}/Dockerfile
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
